/* ==========================================================================
   Thumbnails
   ========================================================================== */

@thumbSize : 150px;
@thumbGutter : 8px;
@thumbRealW : @thumbSize + @thumbGutter;


.thumbnailWrapper{
    margin: @gutter auto;
    background-color: #ffa;
    .clearfix();   
    .thumbnailContainer{
         margin-left: -@thumbGutter;
    }
}

.thumbnail{
    width: @thumbSize;
    height: @thumbSize;
    float:left;
    .border-radius(50%);
    margin:0 0 @gutter @thumbGutter;
    background-color: #aac;
}


#responsiveThumbnails{

    .set(@availableW) {
        @maxThumbsWide : floor((@availableW + @thumbGutter) / @thumbRealW);
        @calculatedW : @maxThumbsWide * @thumbRealW;
        .thumbnailWrapper{
            width:@calculatedW - @thumbGutter; 
            .thumbnailContainer{
                width:@calculatedW ;
            }
        }
    }

    .setMedias(@i) {
        body{
            @minW : (@i * @thumbRealW);
            @media (min-width: @minW){
                #responsiveThumbnails > .set(@minW);
            }
        }
        #responsiveThumbnails > .setMedia(@i - 1);
    }

    .setMedia(@i) when (@i > 1) {  
        body{
            @minW : (@i * @thumbRealW);
            @maxW : (((@i + 1) * @thumbRealW) - 1);
            @media (max-width: @maxW ) and (min-width: @minW){
                #responsiveThumbnails > .set(@minW);
            }
        }
        #responsiveThumbnails > .setMedia(@i - 1);
    }

    .setMedia(@i) when (@i = 1) {
        body{
            @maxW : ((2 * @thumbRealW) - 1);
            @media (max-width: @maxW ){
                #responsiveThumbnails > .set(@thumbRealW);
            }
        }
    }
    
}

